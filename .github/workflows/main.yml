name: Build, Test, and Publish Docker Image to Amazon ECR

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  ECR_REGISTRY: "822546254290.dkr.ecr.us-west-1.amazonaws.com"
  ECR_REPOSITORY: "taskproject"
  AWS_REGION: "us-west-1"

jobs:
  setup-python:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0
      - name: Set up Python 3.11
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

  setup-node:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0
      - name: Set up Node.js 16.x
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'

  install-dependencies:
    needs: setup-python
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Install dependencies for Python
        run: pip install -r requirements.txt

  linting:
    needs: setup-python
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Install pylint
        run: pip install pylint

      - name: Analysing the code with pylint
        run: |
          pylint $(git ls-files '*.py')
          pylint --exit-zero

  test-coverage:
    needs: setup-python
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0
      
      - name: Install pytest and coverage
        run: |
          pip install pytest
          pip install coverage

      - name: Run tests with coverage
        run: coverage run -m pytest

      - name: Generate coverage report and fail if coverage is below 80%
        run: coverage report --fail-under=80

      - name: Generate coverage report in XML format
        run: coverage xml

  sonarcloud-scan:
    needs: setup-python
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-and-publish:
    needs: [setup-node, install-dependencies, linting, test-coverage, sonarcloud-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0
      - name: Install Docker CLI
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials for Docker
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Docker login to Amazon ECR registry
        run: aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}

      - name: Delete old ECR image
        run: |
          aws ecr describe-images --repository-name ${{ env.ECR_REPOSITORY }} --query 'imageDetails[].imageDigest' --output text | while read -r line; do aws ecr batch-delete-image --repository-name ${{ env.ECR_REPOSITORY }} --image-ids imageDigest="$line"; done

      - name: Build Docker image and tag with latest tag
        run: docker build --file Dockerfile --tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest .

      - name: Tag Docker image with commit hash
        run: docker tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

      - name: Push Docker image with latest tag to Amazon ECR
        run: docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

      - name: Upload coverage report to GitHub Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: coverage.xml
