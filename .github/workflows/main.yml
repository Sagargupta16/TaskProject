name: Build, Test, and Publish Docker Image to Amazon ECR

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  BRANCH_NAME: master

jobs:
  setup-python:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

  setup-node:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3

      - name: Set up Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'

  linting-and-formatting:
    needs: setup-python
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}
          token: ${{ secrets.G_TOKEN }}
          ssh-strict: true

      - name: Create black-formatting branch
        run: git checkout -b ${{env.BRANCH_NAME}}-black-formatting
  
      - name: Check for changes with black
        id: black-check
        run: |
          pip install black
          result=$(black --check . && echo "success" || echo "failure")
          echo "BLACK_CHECK_RESULT=$result" >> $GITHUB_ENV

      - name: perform black formatting and remove unused imports with autoflake
        if: ${{ env.BLACK_CHECK_RESULT }}" == "failure"
        run: |
          black .
          pip install autoflake
          autoflake --remove-all-unused-imports --recursive --remove-unused-variables --in-place .


      - name: setup GitHub CLI
        if: ${{ env.BLACK_CHECK_RESULT }}" == "failure"
        run: |
          sudo apt install gh
          gh --version
  
      - name: Add changes to git and push to remote branch 
        if: ${{ env.BLACK_CHECK_RESULT }}" == "failure"
        run: |
          git config --local user.email "sagar.gupta@ikarus3d.com"
          git config --local user.name ${{ github.actor }}
          git add .
          git commit -m "Format code with black and remove unused imports with autoflake"
          git push origin ${{env.BRANCH_NAME}}-black-formatting
      
      - name: Create pull request
        if: ${{ env.BLACK_CHECK_RESULT }}" == "failure"
        run: |
          gh auth login --with-token ${{ secrets.G_TOKEN }}
          gh pr create --title "Format code with black and remove unused imports with autoflake" --body "This PR was automatically created by GitHub Actions" --base ${{env.BRANCH_NAME}} --head ${{env.BRANCH_NAME}}-black-formatting --repo ${{ github.repository }}
  
      - name: flake8 linting
        run: |
          pip install flake8
          flake8 .

      # - name: Analysing the code with pylint
      #   run: |
      #     pip install pylint
      #     pylint $(git ls-files '*.py')
      #     pylint --exit-zero

  Linting-node:
    runs-on: ubuntu-latest
    needs: [setup-node]
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # - name: Move to client directory
      #   run: cd client

      - name: Install dependencies
        run: |
          npm install
        working-directory: ./client

      - name: Analysing the code with eslint
        run: |
          npm install eslint
          npx eslint $(git ls-files '*.js')
        working-directory: ./client

      - name: Analysing the code with stylelint
        run: |
          npm install stylelint
          npm install --save-dev stylelint-config-standard
          npx stylelint $(git ls-files '*.css')
        working-directory: ./client

      - name: Analysing the code with prettier
        run: |
          npm install prettier
          npx prettier --write $(git ls-files '*.js')
          npx prettier --check $(git ls-files '*.js')
        working-directory: ./client

      # - name: Lint Code Base
      #   uses: github/super-linter@v5
      #   env:
      #     VALIDATE_JAVASCRIPT_ES: true
      #     VALIDATE_JAVASCRIPT_STANDARD: true
      #     VALIDATE_CSS_ES: true
      #     VALIDATE_CSS_STANDARD: true

      # - name: Lint Code Base
      #   uses: github/super-linter@v5
      #   env:
      #     VALIDATE_PYTHON_BLACK: true
      #     GITHUB_TOKEN: ${{ secrets.G_TOKEN }}

  testing-and-code-coverage:
    runs-on: ubuntu-latest
    needs: linting-and-formatting
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest
          pip install coverage
  
      - name: Run tests with coverage
        run: coverage run --source . --omit '/usr/*' -m pytest
  
      - name: Generate coverage report and fail if coverage is below 80%
        run: coverage report --fail-under=80 --omit=venv/*,tests/*
  
      - name: Generate coverage report in XML format
        run: coverage xml -o coverage.xml --omit=venv/*,tests/*
      
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: coverage.xml

  build-and-test-frontend:
    runs-on: ubuntu-latest
    needs: [Linting-node]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          npm install
        working-directory: ./client

      - name: Build client
        run: |
          npm run build
        working-directory: ./client
        
      - name: Test client
        run: |
          npm run test -- --passWithNoTests
        working-directory: ./client

  sonarQube-scan:
    needs: [testing-and-code-coverage , build-and-test-frontend]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download coverage artifact
        uses: actions/download-artifact@v2
        with:
          name: coverage-report
          path: coverage-report

      # - name: SonarQube Scan
      #   uses: SonarSource/sonarqube-scan-action@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      #     LC_ALL: "en_US.UTF-8"
      #   with:
      #     projectBaseDir: .
      #     args: >
      #       -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}-${{ env.BRANCH_NAME }}
      #       -Dsonar.projectName=${{ secrets.SONAR_PROJECT_KEY }}-${{ env.BRANCH_NAME }}
      #       -Dsonar.python.coverage.reportPaths=coverage-report/coverage.xml

      # - name: SonarCloud Scan
      #   uses: SonarSource/sonarcloud-github-action@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_CLOUD_TOKEN }}
      #   with:
      #     args: >
      #       -Dsonar.python.coverage.reportPaths=coverage.xml

  build-and-publish:
    needs: sonarQube-scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3
          
      - name: Install Docker CLI
        uses: docker/setup-buildx-action@v2
      
      - name: Configure AWS credentials for Docker
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Docker login to Amazon ECR registry
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v5
        with:
          github_token: ${{ secrets.G_TOKEN }}
        
      - name: Create a GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          release_name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}

      - name: Build Docker image and tag with latest tag
        run: |
          docker build --file Dockerfile --tag latest .

      - name: Tag Docker image with commit hash
        run: |
          docker tag latest ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ steps.tag_version.outputs.new_tag }}
          docker tag latest ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest


      - name: Push Docker image with latest tag to Amazon ECR
        run: |
          docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ steps.tag_version.outputs.new_tag }}
          docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest


      # - name: Delete old ECR image
      #   run: |
      #     aws ecr describe-images --repository-name ${{ env.ECR_REPOSITORY }} --query 'imageDetails[].imageDigest' --output text | while read -r line; do aws ecr batch-delete-image --repository-name ${{ env.ECR_REPOSITORY }} --image-ids imageDigest="$line"; done
    

