name: Build, Test, and Publish Docker Image to Amazon ECR

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  ECR_REGISTRY: "822546254290.dkr.ecr.us-west-1.amazonaws.com"
  ECR_REPOSITORY: "taskproject"
  AWS_REGION: "us-west-1"

jobs:
  setup-python:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3
  
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

  setup-node:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3

      - name: Set up Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'   

  Linting:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3

      - name: Analysing the code with black
        run: |
          pip install black
          black --check $(git ls-files '*.py')

      # - name: Analysing the code with pylint
      #   run: |
      #     pip install pylint
      #     pylint $(git ls-files '*.py')
      #     pylint --exit-zero

      - name: Analysing the code with flake8
        run: |
          pip install flake8
          flake8 $(git ls-files '*.py')

      # - name: Lint Code Base
      #   uses: github/super-linter@v5
      #   env:
      #     VALIDATE_PYTHON_BLACK: true
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  testing:
    runs-on: ubuntu-latest
    needs: setup-python
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
  
      - name: Run tests with coverage
        run: coverage run --source . --omit '/usr/*' -m pytest
  
      - name: Generate coverage report and fail if coverage is below 80%
        run: coverage report --fail-under=80
  
      - name: Generate coverage report in XML format
        run: coverage xml -o coverage.xml --omit=venv/*,tests/*
      
  sonarcloud-scan:
    needs: [testing, setup-node, Linting] 
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_CLOUD_TOKEN }}
        with:
          args: >
            -Dsonar.python.coverage.reportPaths=coverage.xml

      # - name: SonarQube Scan
      #   uses: sonarsource/sonarqube-scan-action@master
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build:
    needs: setup-python
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3
  
      - name: Install Docker CLI
        uses: docker/setup-buildx-action@v2
  
      - name: Build Docker image and tag with latest tag
        run: docker build --file Dockerfile --tag myimage:latest .
        # Replace 'myimage' with the desired image name
  
      - name: archive artifact
        uses: actions/upload-artifact@v2
        with:
          name: myimage
          path: ./myimage.tar.gz

      
  
  publish:
    needs: [build, sonarcloud-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: myimage
          path: ./myimage.tar.gz

      - name: Load Docker image from archive
        run: docker load -i myimage.tar.gz

      - name: Configure AWS credentials for Docker
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
  
      - name: Docker login to Amazon ECR registry
        run: aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}
  
      - name: Push Docker image with latest tag to Amazon ECR
        run: docker push myimage:latest
        # Replace 'myimage' with the same image name used in the build job
  
  